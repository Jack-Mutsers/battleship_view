#pragma checksum "C:\Users\Martin\Documents\HBO ICT\Semester 2 Software Engineering\Proftaak\Battleships Git\battleship_view\battleship_view\Pages\CreateField.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "10d99affa2c9bc34c097cda55c0bfb52d408d6a4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(battleship_view.Pages.Pages_CreateField), @"mvc.1.0.razor-page", @"/Pages/CreateField.cshtml")]
namespace battleship_view.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Martin\Documents\HBO ICT\Semester 2 Software Engineering\Proftaak\Battleships Git\battleship_view\battleship_view\Pages\_ViewImports.cshtml"
using battleship_view;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"10d99affa2c9bc34c097cda55c0bfb52d408d6a4", @"/Pages/CreateField.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"31734f6339aa37ff37eef8a2e5a78c9ec9bcc4f2", @"/Pages/_ViewImports.cshtml")]
    public class Pages_CreateField : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\Martin\Documents\HBO ICT\Semester 2 Software Engineering\Proftaak\Battleships Git\battleship_view\battleship_view\Pages\CreateField.cshtml"
  
    ViewData["Title"] = "CreateField";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "10d99affa2c9bc34c097cda55c0bfb52d408d6a43462", async() => {
                WriteLiteral(@"
    <style>
        .wrapper {
            display: grid;
            grid-template-columns: repeat(2, auto);
            grid-column-gap: 200px;
            justify-items: center;
        }

        .field-grid {
            display: grid;
            grid-template-columns: repeat(10, 40px);
            grid-template-rows: repeat(10, 40px);
            background-color:#00b7ed;
        }

            .field-grid > div {
                border: #000 1px solid;
            }

        .selection-grid > div {
            border: #000 1px solid;
        }

        .selection-grid {
            position:relative;
            display: grid;
            grid-row: 1;
            grid-column: 2;
            grid-template-columns: repeat(6, 40px);
            grid-template-rows: repeat(10, 40px);
            background-color:#00b7ed;
            z-index: -1;
        }

        .selection-grid-layer {
            position: relative;
            display: grid;
            grid-row: ");
                WriteLiteral(@"1;
            grid-column: 2;
            grid-template-columns: repeat(6, 40px);
            grid-template-rows: repeat(10, 40px);
        }

        .button-container1 {
            grid-column: 1;
        }

        .button-container2 {
            grid-column: 2;
        }

        .button {
            background-color: #bbb;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 25px;
            margin: 25px 2px;
            cursor: pointer;
        }

            .button:hover {
                background-color: #aaa;
            }

        .button1 {
            border-radius: 12px
        }

        .button2 {
            border-radius: 12px
        }

        #boat {
            position: relative;
            background-color: #012758;
            height: 200px;
            width: 40px;
            bor");
                WriteLiteral(@"der: #000 1px solid;
            border-radius: 50%;
            transform-origin: center;
        }

        #boat2 {
            position: relative;
            background-color: #012758;
            height: 160px;
            width: 40px;
            border: #000 1px solid;
            border-radius: 50%;
            transform-origin: left center;
        }

        #boat3 {
            position: relative;
            background-color: #012758;
            height: 120px;
            width: 40px;
            border: #000 1px solid;
            border-radius: 50%;
            transform-origin: center;
        }

        #boat4 {
            position: relative;
            background-color: #012758;
            height: 120px;
            width: 40px;
            border: #000 1px solid;
            border-radius: 50%;
            transform-origin: center;
        }

        #boat5 {
            position: relative;
            background-color: #012758;
            height: ");
                WriteLiteral("80px;\r\n            width: 40px;\r\n            border: #000 1px solid;\r\n            border-radius: 50%;\r\n            transform-origin: left center;\r\n        }\r\n\r\n    </style>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<h1>CreateField</h1>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "10d99affa2c9bc34c097cda55c0bfb52d408d6a47822", async() => {
                WriteLiteral(@"
    <div class=""wrapper"">
        <div class=""field-grid"">
            <div id =""topleft"" ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop");
                WriteLiteral(@"=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragov");
                WriteLiteral(@"er=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> ");
                WriteLiteral(@"</div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <di");
                WriteLiteral(@"v ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ");
                WriteLiteral(@"ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(e");
                WriteLiteral(@"vent)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
       ");
                WriteLiteral(@"     <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
        </div>
        <div class=""selection-grid"">
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div");
                WriteLiteral(@">
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
       ");
                WriteLiteral(@"     <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
            <div> </div>
        </div>
        <div class=""selection-grid-layer"">
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)"">
                <div ondragstart=""dragStart(event)"" draggable=""true"" id=""boat"" onclick=""selectElement(this.id)""></div>
            </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)"">
                <div ondragstart=""dragStart(event)"" draggable=""true"" id=""boat2"" onclick=""selectElement(this.id)""></div>
            </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)"">
                <div ondragstart=""dragStart(event)"" draggable=""true"" id=""boat3"" onclick=""selectElement(this.id)""></div>
            </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)"">
                <div ondragstart=""dragStart(event)"" draggable=""true"" id=""boat4"" onclick");
                WriteLiteral(@"=""selectElement(this.id)""></div>
            </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)"">
                <div ondragstart=""dragStart(event)"" draggable=""true"" id=""boat5"" onclick=""selectElement(this.id)""></div>
            </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)");
                WriteLiteral(@"""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            ");
                WriteLiteral(@"<div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event");
                WriteLiteral(@")"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDro");
                WriteLiteral(@"p(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
            <div ondrop=""drop(event)"" ondragover=""allowDrop(event)""> </div>
        </div>
        <div class=""button-container1"">
            <button class=""button button1""> Ready</button>
        </div>
        <div class=""button-container2"">
            <button class=""button button2"" onclick=""rotateElement()""> Rotate</button>
        </div>
    </div>

    <script>
        var id;


        function dragStart(event) {  
            event.dataTransfer.setData(""Text"", event.target.id);
        }

        function allowDrop(event) {
            event.preventDefault();
        }

        function drop(event) {
            event.preventDefault();
            var data");
                WriteLiteral(@" = event.dataTransfer.getData(""Text"");
            var bottom = document.getElementById(""topleft"").offsetTop + 10 * 40;
            var right = document.getElementById(""topleft"").offsetLeft + 10 * 40;
            var elHeight = document.getElementById(data).offsetHeight;
            var elWidth = document.getElementById(data).offsetWidth;
            var eventVertical = event.target.offsetTop;
            var eventHorizontal = event.target.offsetLeft;

            if (((eventVertical + elHeight) <= bottom) && ((eventHorizontal + elWidth) <= right)) {
            event.target.appendChild(document.getElementById(data));
            }
        }

        function selectElement(clicked_id) {
            if (id != null) {
                document.getElementById(id).style.border = ""#000 1px solid""
            }
            id = clicked_id;
            document.getElementById(id).style.border = ""#000 3px solid""
        }

        function rotateElement() {
            if (document.getElementById");
                WriteLiteral(@"(id).offsetHeight > document.getElementById(id).offsetWidth) {
                var width = document.getElementById(id).offsetWidth + 'px';
                var height = document.getElementById(id).offsetHeight + 'px';
                document.getElementById(id).style.width = height;
                document.getElementById(id).style.height = width;
            } else if (document.getElementById(id).offsetWidth > document.getElementById(id).offsetHeight) {
                var width = document.getElementById(id).offsetWidth + 'px';
                var height = document.getElementById(id).offsetHeight + 'px';
                document.getElementById(id).style.width = height;
                document.getElementById(id).style.height = width;
            }
        
        }


    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<battleship_view.CreateFieldModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<battleship_view.CreateFieldModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<battleship_view.CreateFieldModel>)PageContext?.ViewData;
        public battleship_view.CreateFieldModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
